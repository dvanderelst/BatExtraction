
def get_parameters(capture):
    fps = capture.get(cv2.CAP_PROP_FPS)
    total_number_of_frames = int(capture.get(cv2.CAP_PROP_FRAME_COUNT))
    return fps, total_number_of_frames


def extract_frames(capture, frame_nr):
    capture.set(cv2.CAP_PROP_POS_FRAMES, frame_nr - 1)
    start = time.time()
    _, image0 = capture.read()
    _, image1 = capture.read()
    _, image2 = capture.read()
    end = time.time()
    print(end-start)

    if image0 is None or image1 is None or image2 is None:
        print('Could not extract frame for frame nr: ' + str(frame_nr))
        return False

    image0 = rgb2gray(image0)
    image1 = rgb2gray(image1)
    image2 = rgb2gray(image2)

    return image0, image1, image2




============
video = 'bat_feed_trim.mp4'
vidcap = Extract.get_capture(video)
fps, frames = Extract.get_parameters(vidcap)
#%%
start_frame = 25
end_frame = 200

results = pandas.DataFrame()
Extract.excerpt(vidcap,'excerpt.mp4', start_frame, end_frame)
for frame in range(start_frame, end_frame):
    images = Extract.extract_frames(vidcap, frame)
    if images:
        reference = images[0]
        delta = Extract.difference(images)
        delta = delta > 0.02
        regions = regionprops(label(delta))
        regions = Extract.select_regions(regions, min_area=1000)
        regions = Extract.filter_non_contained_bounding_boxes(regions)
        print('frame', frame, len(regions))
        if len(regions) > 0:
            table = Extract.regions2table(regions)
            table['frame'] = frame
            results = pandas.concat((results, table))

#%%
pyplot.figure()
pyplot.imshow(reference)
pyplot.scatter(results.y, results.x, c=results.frame, cmap='jet')
pyplot.show()
















    pyplot.figure()
    pyplot.imshow(frame2)
    pyplot.colorbar()
    pyplot.show()

    Extract.plot_regions(frame2, regions)
    pyplot.show()


# def excerpt(capture, output_path, start_frame, end_frame):
#     fps = capture.get(cv2.CAP_PROP_FPS)
#     width = int(capture.get(cv2.CAP_PROP_FRAME_WIDTH))
#     height = int(capture.get(cv2.CAP_PROP_FRAME_HEIGHT))
#
#     fourcc = cv2.VideoWriter_fourcc(*'mp4v')
#     out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))
#
#     capture.set(cv2.CAP_PROP_POS_FRAMES, start_frame)
#     end_frame = min(end_frame, capture.get(cv2.CAP_PROP_FRAME_COUNT) - 1)
#
#     for frame_number in range(start_frame, int(end_frame) + 1):
#         ret, frame = capture.read()
#         if ret:
#             out.write(frame)
#         else:
#             print(f"Error reading frame {frame_number}")
#             break
#     out.release()


# def regions2table(regions):
#     df = pandas.DataFrame([{'Label': region.label,
#                             'Area': region.area,
#                             'BoundingBox': region.bbox,
#                             'x': region.centroid[0],
#                             'y': region.centroid[1],
#                             } for region in regions])
#     return df
#
#
# def plot_regions(image, regions):
#     fig, ax = pyplot.subplots()
#     ax.imshow(image, cmap=pyplot.cm.gray)
#
#     for props in regions:
#         y0, x0 = props.centroid
#         ax.plot(x0, y0, '.g', markersize=15)
#
#         minr, minc, maxr, maxc = props.bbox
#         bx = (minc, maxc, maxc, minc, minc)
#         by = (minr, minr, maxr, maxr, minr)
#         ax.plot(bx, by, '-b', linewidth=2.5)
#     pyplot.show()
#
#




pyplot.close('all')

pyplot.figure()
pyplot.imshow(delta)
pyplot.colorbar()
pyplot.show()

pyplot.figure()
pyplot.imshow(images[1], cmap='gray')
pyplot.show()


#orientation = props.orientation
#size = props.area

#x1 = x0 + math.cos(orientation) * 0.5 * props.axis_minor_length
#y1 = y0 - math.sin(orientation) * 0.5 * props.axis_minor_length
#x2 = x0 - math.sin(orientation) * 0.5 * props.axis_major_length
#y2 = y0 - math.cos(orientation) * 0.5 * props.axis_major_length

#ax.plot((x0, x1), (y0, y1), '-r', linewidth=2.5)
#ax.plot((x0, x2), (y0, y2), '-r', linewidth=2.5)